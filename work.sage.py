
# This file was *autogenerated* from the file work.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import operator
import itertools
var("x", "y", "z", "r", "s", "t")
a = matrix(SR, [[_sage_const_1 , _sage_const_0 , _sage_const_0 ], 
                [_sage_const_0 , _sage_const_1 , y], 
                [_sage_const_0 , _sage_const_0 , _sage_const_1 ]])

b = matrix(SR, [[_sage_const_1 , x, _sage_const_0 ], 
                [_sage_const_0 , _sage_const_1 , _sage_const_0 ], 
                [_sage_const_0 , _sage_const_0 , _sage_const_1 ]])

c = matrix(SR, [[_sage_const_1 , _sage_const_0 , z], 
                [_sage_const_0 , _sage_const_1 , _sage_const_0 ], 
                [_sage_const_0 , _sage_const_0 , _sage_const_1 ]])

d = matrix(SR, [[_sage_const_1 , _sage_const_0 , _sage_const_0 ], 
                [_sage_const_0 , _sage_const_1 , _sage_const_0 ], 
                [_sage_const_0 , r, _sage_const_1 ]])

e = matrix(SR, [[_sage_const_1 , _sage_const_0 , _sage_const_0 ], 
                [s, _sage_const_1 , _sage_const_0 ], 
                [_sage_const_0 , _sage_const_0 , _sage_const_1 ]])

f = matrix(SR, [[_sage_const_1 , _sage_const_0 , _sage_const_0 ], 
                [_sage_const_0 , _sage_const_1 , _sage_const_0 ], 
                [t, _sage_const_0 , _sage_const_1 ]])

def allSymbolic(m):
    for row in m:
        for entry in row:
            if entry in {_sage_const_0 ,_sage_const_1 }: return False
    return True

def symbolicOnlyInTopLeft(m):
    for i, row in enumerate(m):
        for j, entry in enumerate(row):
            if not i and not j and entry in {_sage_const_0 , _sage_const_1 }: return False
            # if (i or j) and entry not in {0, 1}: return False
    return True

# wait, this is 6 items. So it's undecidable...
# But these are 6 specific matrices, not 6 general matrices.
# Like, these are fixed ahead of time. They aren't the input.
generators = [a, b, c, d, e, f]

def findMatrix(f):
    done = False
    length = _sage_const_2 
    # now we BFS over words in the generators
    while not done:
        for word in itertools.product(generators, repeat=length):
            m = reduce(operator.mul, word)
            if f(m):
                print m
                print length
                print m.rank()
                done = True
                # break
        length += _sage_const_1 


# print e.solve_right(matrix(SR, [[2, 0, 0], 
#                           [s, 1, 0], 
#                           [0, 0, 1]]))

print findMatrix(symbolicOnlyInTopLeft)

